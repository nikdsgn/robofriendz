{"version":3,"sources":["components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["CardList","_ref","robots","Error","SearchBox","searchfield","searchChange","react_default","a","createElement","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onSearchChange","event","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","name","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAgCeA,EA5BE,SAAAC,GAAgBA,EAAbC,OAGZ,MAAM,IAAIC,MAAM,aCUTC,EAfG,SAAAH,GAAmCA,EAAhCI,YAAgC,IAAnBC,EAAmBL,EAAnBK,aAC9B,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SACAC,UAAU,sCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUP,MCGHQ,EATA,SAACC,GACf,OACIR,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCgBDC,cAnBX,SAAAA,EAAYN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMV,KACDc,MAAQ,CACTC,UAAU,GAHCR,iFAODS,EAAOC,GACrBP,KAAKQ,SAAS,CAAEH,UAAU,qCAI1B,OAAIL,KAAKI,MAAMC,SACJvB,EAAAC,EAAAC,cAAA,gCAEJgB,KAAKV,MAAMK,gBAhBCc,aCiEZC,cArDX,SAAAA,IAAc,IAAAb,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,IACVb,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAY,GAAAP,KAAAH,QAcJW,eAAiB,SAACC,GACdf,EAAKW,SAAS,CAAE5B,YAAagC,EAAMC,OAAOC,SAd1CjB,EAAKO,MAAQ,CACT3B,OAAQ,GACRG,YAAa,IAJPiB,mFAQM,IAAAkB,EAAAf,KAChBgB,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAAG,GAAK,OAAIL,EAAKP,SAAS,CAAE/B,OAAQ2C,uCAUlC,IAAAC,EAC2BrB,KAAKI,MAA7B3B,EADH4C,EACG5C,OAAQG,EADXyC,EACWzC,YACV0C,EAAiB7C,EAAO8C,OAAO,SAAAC,GACjC,OAAOA,EAAMC,KAAKC,cAAcC,SAAS/C,EAAY8C,iBAOzD,OAAQjD,EAAOmD,OAGX9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,wBACAH,EAAAC,EAAAC,cAAC6C,EAAD,CAAWhD,aAAcmB,KAAKW,iBAC1B7B,EAAAC,EAAAC,cAAC8C,EAAD,KACAhD,EAAAC,EAAAC,cAAC+C,EAAD,KACIjD,EAAAC,EAAAC,cAACgD,EAAD,CAAUvD,OAAQ6C,OAP9BxC,EAAAC,EAAAC,cAAA,6BAjCUyB,mBCDEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECANC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD+G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.e0ae4100.chunk.js","sourcesContent":["import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ( {robots} ) => {\n\n    if (true) {\n        throw new Error('Noooooo!');\n    }\n\n//    const cardComponent = \n    return (\n        \n        <div> {\n          robots.map((user, i) => {\n        return (\n        <Card \n            key={i}\n            id={robots[i].id} \n            name={robots[i].name} \n            email={robots[i].email} \n\n        /> \n        );\n    })\n\n}\n        </div>\n    );\n}\n\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n    <div className='pa2'>\n        <input \n        className='pa3 ba b--green bg-lightest-blue tc'\n        type='search' \n        placeholder='search robots' \n        onChange={searchChange}\n        />\n        \n    </div>\n    );\n}\n\n\nexport default SearchBox;","import React from 'react';\n\n\nconst Scroll = (props) => {\n return (\n     <div style={{overflowY: 'scroll', border: '5px solid black', height: '750px'}}>\n         {props.children}\n     </div>\n  );\n};\n\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render () {\n        if (this.state.hasError) {\n            return <h1>Ooooops, not good.</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\n//import { robots } from './robots';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\n\n//PROPS are never changed (are things that come from STATE)\n//STATE is object that describes application, CAN change\n\n\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=> response.json())\n        .then(users => this.setState({ robots: users }));\n        \n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n        //console.log(event.target.value);\n        \n    }\n\n    render() {\n        const { robots, searchfield } = this.state;\n        const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        //if (robots.length === 0) {\n    //   \n    //        return <h1> Loading</h1>\n    //    } else {\n    //    return (\n        return !robots.length ?\n        <h1> Loading</h1> : \n        (\n            <div className='tc'>\n            <h1 className='f1'>ROBO&nbsp;&nbsp; FRIENDS</h1>\n            <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                <ErrorBoundry>\n                    <CardList robots={filteredRobots}/>\n                    </ErrorBoundry>\n                </Scroll>\n            </div>\n             \n            );\n        }\n    \n}\n   \n   \n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport './containers/App.css';\nimport * as serviceWorker from './serviceWorker';\n \nimport 'tachyons';\n\n\n//import App from './App';\n\n\n\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n\n//import registerServiceWorker from './registerServiceWorker';\n\n//serviceWorker();\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n//\n//// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n//// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n// import * as serviceWorker from './serviceWorker';"],"sourceRoot":""}